importasyncio
importsys
fromosimportenviron,execle,path,remove

importheroku3
fromgitimportRepo
fromgit.excimportGitCommandError,InvalidGitRepositoryError,NoSuchPathError

fromInerukiimportOWNER_ID
fromIneruki.configimportget_str_key
fromIneruki.services.eventsimportregister
fromIneruki.services.telethonimporttbotasupdate

HEROKU_APP_NAME=get_str_key("HEROKU_APP_NAME",None)
HEROKU_API_KEY=get_str_key("HEROKU_API_KEY",None)
UPSTREAM_REPO_URL=get_str_key("UPSTREAM_REPO_URL",None)
ifnotUPSTREAM_REPO_URL:
UPSTREAM_REPO_URL="https://github.com/errorshivansh/Ineruki"

requirements_path=path.join(
path.dirname(path.dirname(path.dirname(__file__))),"requirements.txt"
)


asyncdefgen_chlog(repo,diff):
ch_log=""
d_form="%d/%m/%y"
forcinrepo.iter_commits(diff):
ch_log+=(
f"â€¢[{c.committed_datetime.strftime(d_form)}]:{c.summary}by<{c.author}>\n"
)
returnch_log


asyncdefupdateme_requirements():
reqs=str(requirements_path)
try:
process=awaitasyncio.create_subprocess_shell(
"".join([sys.executable,"-m","pip","install","-r",reqs]),
stdout=asyncio.subprocess.PIPE,
stderr=asyncio.subprocess.PIPE,
)
awaitprocess.communicate()
returnprocess.returncode
exceptExceptionase:
returnrepr(e)


@register(pattern="^/update(?:|$)(.*)")
asyncdefupstream(ups):
globalUPSTREAM_REPO_URL
check=ups.message.sender_id
OK=int(OWNER_ID)
ifint(check)!=OK:
return
lol=awaitups.reply("`Checkingforupdates,pleasewait....`")
conf=ups.pattern_match.group(1)
off_repo=UPSTREAM_REPO_URL
force_update=False

try:
txt="`Oops..Updatercannotcontinue"
txt+="pleaseaddherokuapikey,name`\n\n**LOGTRACE:**\n"
repo=Repo()
exceptNoSuchPathErroraserror:
awaitlol.edit(f"{txt}\n`directory{error}isnotfound`")
repo.__del__()
return
exceptGitCommandErroraserror:
awaitlol.edit(f"{txt}\n`Earlyfailure!{error}`")
repo.__del__()
return
exceptInvalidGitRepositoryErroraserror:
ifconf!="now":
awaitlol.edit(
f"**Unfortunately,thedirectory{error}doesnotseemtobeagitrepository.\
\nButwecanfixthatbyforceupdatingthebotusing**`/updatenow`"
)
return
repo=Repo.init()
origin=repo.create_remote("upstream",off_repo)
origin.fetch()
force_update=True
repo.create_head("main",origin.refs.main)
repo.heads.main.set_tracking_branch(origin.refs.main)
repo.heads.main.checkout(True)

ac_br=repo.active_branch.name
ifac_br!="main":
awaitlol.edit(
f"**[UPDATER]:**`Lookslikeyouareusingyourowncustombranch({ac_br})."
"inthatcase,Updaterisunabletoidentify"
"whichbranchistobemerged."
"pleasecheckouttoanyofficialbranch`"
)
repo.__del__()
return

try:
repo.create_remote("upstream",off_repo)
exceptBaseException:
pass

ups_rem=repo.remote("upstream")
ups_rem.fetch(ac_br)

changelog=awaitgen_chlog(repo,f"HEAD..upstream/{ac_br}")

ifnotchangelogandnotforce_update:
awaitlol.edit("\nYourIneruki>>**up-to-date**\n")
repo.__del__()
return

ifconf!="now"andnotforce_update:
changelog_str=(
f"**NewUPDATEavailablefor{ac_br}\n\nCHANGELOG:**\n`{changelog}`"
)
iflen(changelog_str)>4096:
awaitlol.edit("`Changelogistoobig,viewthefiletoseeit.`")
file=open("output.txt","w+")
file.write(changelog_str)
file.close()
awaitupdate.send_file(
ups.chat_id,
"output.txt",
reply_to=ups.id,
)
remove("output.txt")
else:
awaitlol.edit(changelog_str)
awaitups.respond("**do**`/updatenow`**toupdate**")
return

ifforce_update:
awaitlol.edit("`Force-Syncingtolatestmainbotcode,pleasewait...`")
else:
awaitlol.edit("`StillRunning....`")
ifconf=="deploy":
ifHEROKU_API_KEYisnotNone:
heroku=heroku3.from_key(HEROKU_API_KEY)
heroku_app=None
heroku_applications=heroku.apps()
ifnotHEROKU_APP_NAME:
awaitlol.edit(
"`PleasesetuptheHEROKU_APP_NAMEvariabletobeabletoupdateyourbot.`"
)
repo.__del__()
return
forappinheroku_applications:
ifapp.name==HEROKU_APP_NAME:
heroku_app=app
break
ifheroku_appisNone:
awaitlol.edit(
f"{txt}\n`InvalidHerokucredentialsforupdatingbotdyno.`"
)
repo.__del__()
return
awaitlol.edit(
"`[Updater]\
Yourbotisbeingdeployed,pleasewaitforittocomplete.\nItmaytakeupto5minutes`"
)
ups_rem.fetch(ac_br)
repo.git.reset("--hard","FETCH_HEAD")
heroku_git_url=heroku_app.git_url.replace(
"https://","https://api:"+HEROKU_API_KEY+"@"
)
if"heroku"inrepo.remotes:
remote=repo.remote("heroku")
remote.set_url(heroku_git_url)
else:
remote=repo.create_remote("heroku",heroku_git_url)
try:
remote.push(refspec="HEAD:refs/heads/main",force=True)
exceptGitCommandErroraserror:
awaitlol.edit(f"{txt}\n`Hereistheerrorlog:\n{error}`")
repo.__del__()
return
awaitlol.edit("SuccessfullyUpdated!\n""Restarting.......")
else:
try:
ups_rem.pull(ac_br)
exceptGitCommandError:
repo.git.reset("--hard","FETCH_HEAD")
awaitupdateme_requirements()
awaitlol.edit("`SuccessfullyUpdated!\n""restarting......`")
args=[sys.executable,"-m","Ineruki"]
execle(sys.executable,*args,environ)
return
