importXasyncio
importXsys
fromXosXimportXenviron,Xexecle,Xpath,Xremove

importXheroku3
fromXgitXimportXRepo
fromXgit.excXimportXGitCommandError,XInvalidGitRepositoryError,XNoSuchPathError

fromXInerukiXXimportXOWNER_ID
fromXInerukiX.configXimportXget_str_key
fromXInerukiX.services.eventsXimportXregister
fromXInerukiX.services.telethonXimportXtbotXasXupdate

HEROKU_APP_NAMEX=Xget_str_key("HEROKU_APP_NAME",XNone)
HEROKU_API_KEYX=Xget_str_key("HEROKU_API_KEY",XNone)
UPSTREAM_REPO_URLX=Xget_str_key("UPSTREAM_REPO_URL",XNone)
ifXnotXUPSTREAM_REPO_URL:
XXXXUPSTREAM_REPO_URLX=X"https://github.com/errorshivansh/InerukiX"

requirements_pathX=Xpath.join(
XXXXpath.dirname(path.dirname(path.dirname(__file__))),X"requirements.txt"
)


asyncXdefXgen_chlog(repo,Xdiff):
XXXXch_logX=X""
XXXXd_formX=X"%d/%m/%y"
XXXXforXcXinXrepo.iter_commits(diff):
XXXXXXXXch_logX+=X(
XXXXXXXXXXXXf"â€¢[{c.committed_datetime.strftime(d_form)}]:X{c.summary}XbyX<{c.author}>\n"
XXXXXXXX)
XXXXreturnXch_log


asyncXdefXupdateme_requirements():
XXXXreqsX=Xstr(requirements_path)
XXXXtry:
XXXXXXXXprocessX=XawaitXasyncio.create_subprocess_shell(
XXXXXXXXXXXX"X".join([sys.executable,X"-m",X"pip",X"install",X"-r",Xreqs]),
XXXXXXXXXXXXstdout=asyncio.subprocess.PIPE,
XXXXXXXXXXXXstderr=asyncio.subprocess.PIPE,
XXXXXXXX)
XXXXXXXXawaitXprocess.communicate()
XXXXXXXXreturnXprocess.returncode
XXXXexceptXExceptionXasXe:
XXXXXXXXreturnXrepr(e)


@register(pattern="^/update(?:X|$)(.*)")
asyncXdefXupstream(ups):
XXXXglobalXUPSTREAM_REPO_URL
XXXXcheckX=Xups.message.sender_id
XXXXOKX=Xint(OWNER_ID)
XXXXifXint(check)X!=XOK:
XXXXXXXXreturn
XXXXlolX=XawaitXups.reply("`CheckingXforXupdates,XpleaseXwait....`")
XXXXconfX=Xups.pattern_match.group(1)
XXXXoff_repoX=XUPSTREAM_REPO_URL
XXXXforce_updateX=XFalse

XXXXtry:
XXXXXXXXtxtX=X"`Oops..XUpdaterXcannotXcontinueX"
XXXXXXXXtxtX+=X"pleaseXaddXherokuXapikey,Xname`\n\n**LOGTRACE:**\n"
XXXXXXXXrepoX=XRepo()
XXXXexceptXNoSuchPathErrorXasXerror:
XXXXXXXXawaitXlol.edit(f"{txt}\n`directoryX{error}XisXnotXfound`")
XXXXXXXXrepo.__del__()
XXXXXXXXreturn
XXXXexceptXGitCommandErrorXasXerror:
XXXXXXXXawaitXlol.edit(f"{txt}\n`EarlyXfailure!X{error}`")
XXXXXXXXrepo.__del__()
XXXXXXXXreturn
XXXXexceptXInvalidGitRepositoryErrorXasXerror:
XXXXXXXXifXconfX!=X"now":
XXXXXXXXXXXXawaitXlol.edit(
XXXXXXXXXXXXXXXXf"**Unfortunately,XtheXdirectoryX{error}XdoesXnotXseemXtoXbeXaXgitXrepository.\
XXXXXXXXXXXX\nButXweXcanXfixXthatXbyXforceXupdatingXtheXbotXusing**X`/updateXnow`"
XXXXXXXXXXXX)
XXXXXXXXXXXXreturn
XXXXXXXXrepoX=XRepo.init()
XXXXXXXXoriginX=Xrepo.create_remote("upstream",Xoff_repo)
XXXXXXXXorigin.fetch()
XXXXXXXXforce_updateX=XTrue
XXXXXXXXrepo.create_head("main",Xorigin.refs.main)
XXXXXXXXrepo.heads.main.set_tracking_branch(origin.refs.main)
XXXXXXXXrepo.heads.main.checkout(True)

XXXXac_brX=Xrepo.active_branch.name
XXXXifXac_brX!=X"main":
XXXXXXXXawaitXlol.edit(
XXXXXXXXXXXXf"**[UPDATER]:**`XLooksXlikeXyouXareXusingXyourXownXcustomXbranchX({ac_br}).X"
XXXXXXXXXXXX"inXthatXcase,XUpdaterXisXunableXtoXidentifyX"
XXXXXXXXXXXX"whichXbranchXisXtoXbeXmerged.X"
XXXXXXXXXXXX"pleaseXcheckoutXtoXanyXofficialXbranch`"
XXXXXXXX)
XXXXXXXXrepo.__del__()
XXXXXXXXreturn

XXXXtry:
XXXXXXXXrepo.create_remote("upstream",Xoff_repo)
XXXXexceptXBaseException:
XXXXXXXXpass

XXXXups_remX=Xrepo.remote("upstream")
XXXXups_rem.fetch(ac_br)

XXXXchangelogX=XawaitXgen_chlog(repo,Xf"HEAD..upstream/{ac_br}")

XXXXifXnotXchangelogXandXnotXforce_update:
XXXXXXXXawaitXlol.edit("\nYourXInerukiXXX>>XX**up-to-date**XX\n")
XXXXXXXXrepo.__del__()
XXXXXXXXreturn

XXXXifXconfX!=X"now"XandXnotXforce_update:
XXXXXXXXchangelog_strX=X(
XXXXXXXXXXXXf"**NewXUPDATEXavailableXforX{ac_br}\n\nCHANGELOG:**\n`{changelog}`"
XXXXXXXX)
XXXXXXXXifXlen(changelog_str)X>X4096:
XXXXXXXXXXXXawaitXlol.edit("`ChangelogXisXtooXbig,XviewXtheXfileXtoXseeXit.`")
XXXXXXXXXXXXfileX=Xopen("output.txt",X"w+")
XXXXXXXXXXXXfile.write(changelog_str)
XXXXXXXXXXXXfile.close()
XXXXXXXXXXXXawaitXupdate.send_file(
XXXXXXXXXXXXXXXXups.chat_id,
XXXXXXXXXXXXXXXX"output.txt",
XXXXXXXXXXXXXXXXreply_to=ups.id,
XXXXXXXXXXXX)
XXXXXXXXXXXXremove("output.txt")
XXXXXXXXelse:
XXXXXXXXXXXXawaitXlol.edit(changelog_str)
XXXXXXXXawaitXups.respond("**do**X`/updateXnow`X**toXupdate**")
XXXXXXXXreturn

XXXXifXforce_update:
XXXXXXXXawaitXlol.edit("`Force-SyncingXtoXlatestXmainXbotXcode,XpleaseXwait...`")
XXXXelse:
XXXXXXXXawaitXlol.edit("`StillXRunningX....`")
XXXXifXconfX==X"deploy":
XXXXXXXXifXHEROKU_API_KEYXisXnotXNone:
XXXXXXXXXXXXherokuX=Xheroku3.from_key(HEROKU_API_KEY)
XXXXXXXXXXXXheroku_appX=XNone
XXXXXXXXXXXXheroku_applicationsX=Xheroku.apps()
XXXXXXXXXXXXifXnotXHEROKU_APP_NAME:
XXXXXXXXXXXXXXXXawaitXlol.edit(
XXXXXXXXXXXXXXXXXXXX"`PleaseXsetXupXtheXHEROKU_APP_NAMEXvariableXtoXbeXableXtoXupdateXyourXbot.`"
XXXXXXXXXXXXXXXX)
XXXXXXXXXXXXXXXXrepo.__del__()
XXXXXXXXXXXXXXXXreturn
XXXXXXXXXXXXforXappXinXheroku_applications:
XXXXXXXXXXXXXXXXifXapp.nameX==XHEROKU_APP_NAME:
XXXXXXXXXXXXXXXXXXXXheroku_appX=Xapp
XXXXXXXXXXXXXXXXXXXXbreak
XXXXXXXXXXXXifXheroku_appXisXNone:
XXXXXXXXXXXXXXXXawaitXlol.edit(
XXXXXXXXXXXXXXXXXXXXf"{txt}\n`InvalidXHerokuXcredentialsXforXupdatingXbotXdyno.`"
XXXXXXXXXXXXXXXX)
XXXXXXXXXXXXXXXXrepo.__del__()
XXXXXXXXXXXXXXXXreturn
XXXXXXXXXXXXawaitXlol.edit(
XXXXXXXXXXXXXXXX"`[Updater]\
XXXXXXXXXXXXXXXXXXXXXXXXXXXXYourXbotXisXbeingXdeployed,XpleaseXwaitXforXitXtoXcomplete.\nItXmayXtakeXuptoX5XminutesX`"
XXXXXXXXXXXX)
XXXXXXXXXXXXups_rem.fetch(ac_br)
XXXXXXXXXXXXrepo.git.reset("--hard",X"FETCH_HEAD")
XXXXXXXXXXXXheroku_git_urlX=Xheroku_app.git_url.replace(
XXXXXXXXXXXXXXXX"https://",X"https://api:"X+XHEROKU_API_KEYX+X"@"
XXXXXXXXXXXX)
XXXXXXXXXXXXifX"heroku"XinXrepo.remotes:
XXXXXXXXXXXXXXXXremoteX=Xrepo.remote("heroku")
XXXXXXXXXXXXXXXXremote.set_url(heroku_git_url)
XXXXXXXXXXXXelse:
XXXXXXXXXXXXXXXXremoteX=Xrepo.create_remote("heroku",Xheroku_git_url)
XXXXXXXXXXXXtry:
XXXXXXXXXXXXXXXXremote.push(refspec="HEAD:refs/heads/main",Xforce=True)
XXXXXXXXXXXXexceptXGitCommandErrorXasXerror:
XXXXXXXXXXXXXXXXawaitXlol.edit(f"{txt}\n`HereXisXtheXerrorXlog:\n{error}`")
XXXXXXXXXXXXXXXXrepo.__del__()
XXXXXXXXXXXXXXXXreturn
XXXXXXXXXXXXawaitXlol.edit("SuccessfullyXUpdated!\n"X"Restarting.......")
XXXXelse:
XXXXXXXXtry:
XXXXXXXXXXXXups_rem.pull(ac_br)
XXXXXXXXexceptXGitCommandError:
XXXXXXXXXXXXrepo.git.reset("--hard",X"FETCH_HEAD")
XXXXXXXXawaitXupdateme_requirements()
XXXXXXXXawaitXlol.edit("`SuccessfullyXUpdated!\n"X"restarting......`")
XXXXXXXXargsX=X[sys.executable,X"-m",X"InerukiX"]
XXXXXXXXexecle(sys.executable,X*args,Xenviron)
XXXXXXXXreturn
