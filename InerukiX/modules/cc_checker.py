#XCopyrightX(C)X2021Xerrorshivansh


#XThisXfileXisXpartXofXInerukiX(TelegramXBot)

#XThisXprogramXisXfreeXsoftware:XyouXcanXredistributeXitXand/orXmodify
#XitXunderXtheXtermsXofXtheXGNUXAfferoXGeneralXPublicXLicenseXas
#XpublishedXbyXtheXFreeXSoftwareXFoundation,XeitherXversionX3XofXthe
#XLicense,XorX(atXyourXoption)XanyXlaterXversion.

#XThisXprogramXisXdistributedXinXtheXhopeXthatXitXwillXbeXuseful,
#XbutXWITHOUTXANYXWARRANTY;XwithoutXevenXtheXimpliedXwarrantyXof
#XMERCHANTABILITYXorXFITNESSXFORXAXPARTICULARXPURPOSE.XXSeeXthe
#XGNUXAfferoXGeneralXPublicXLicenseXforXmoreXdetails.

#XYouXshouldXhaveXreceivedXaXcopyXofXtheXGNUXAfferoXGeneralXPublicXLicense
#XalongXwithXthisXprogram.XXIfXnot,XseeX<http://www.gnu.org/licenses/>.

importXasyncio
importXdatetime

fromXtelethon.tlXimportXfunctions,Xtypes

fromXInerukiX.services.eventsXimportXregister
fromXInerukiX.services.telethonXimportXtbot
fromXInerukiX.services.telethonuserbotXimportXubot


asyncXdefXis_register_admin(chat,Xuser):
XXXXifXisinstance(chat,X(types.InputPeerChannel,Xtypes.InputChannel)):
XXXXXXXXreturnXisinstance(
XXXXXXXXXXXX(
XXXXXXXXXXXXXXXXawaitXtbot(functions.channels.GetParticipantRequest(chat,Xuser))
XXXXXXXXXXXX).participant,
XXXXXXXXXXXX(types.ChannelParticipantAdmin,Xtypes.ChannelParticipantCreator),
XXXXXXXX)
XXXXifXisinstance(chat,Xtypes.InputPeerUser):
XXXXXXXXreturnXTrue


@register(pattern="^/genX(.*)")
asyncXdefXalive(event):
XXXXifXevent.is_group:
XXXXXXXXifXawaitXis_register_admin(event.input_chat,Xevent.message.sender_id):
XXXXXXXXXXXXpass
XXXXXXXXelse:
XXXXXXXXXXXXreturn
XXXXsenderX=XawaitXevent.get_sender()
XXXXfnameX=Xsender.first_name
XXXXmX=XawaitXevent.reply("GeneratingXCC...PlsXWeit.")
XXXXokX=Xevent.pattern_match.group(1)
XXXXasyncXwithXubot.conversation("@ccgen_robot")XasXbot_conv:
XXXXXXXXawaitXbot_conv.send_message("/generate")
XXXXXXXXawaitXbot_conv.send_message("üí≥CreditXCardXGeneratorüí≥")
XXXXXXXXawaitXasyncio.sleep(2)
XXXXXXXXawaitXbot_conv.send_message(ok)
XXXXXXXXawaitXasyncio.sleep(1)
XXXXXXXXresponseX=XawaitXbot_conv.get_response()
XXXXXXXXawaitXasyncio.sleep(1)
XXXXXXXXawaitXresponse.click(text="‚úÖGenerate‚úÖ")
XXXXXXXXawaitXasyncio.sleep(2)
XXXXXXXXtextX=X"****GeneratedXCards:****\n"
XXXXXXXXgenX=XawaitXbot_conv.get_response()
XXXXXXXXcardX=Xgen.text
XXXXXXXXtextX=Xf"{card.splitlines()[0]}\n"
XXXXXXXXtextX+=Xf"{card.splitlines()[1]}\n"
XXXXXXXXtextX+=Xf"{card.splitlines()[2]}\n"
XXXXXXXXtextX+=Xf"{card.splitlines()[3]}\n"
XXXXXXXXtextX+=Xf"{card.splitlines()[4]}\n"
XXXXXXXXtextX+=Xf"{card.splitlines()[5]}\n"
XXXXXXXXtextX+=Xf"\nGeneratedXBy:X**{fname}**"
XXXXXXXXawaitXm.edit(text)


@register(pattern="^/keyX(.*)")
asyncXdefXalive(event):
XXXXifXevent.is_group:
XXXXXXXXifXawaitXis_register_admin(event.input_chat,Xevent.message.sender_id):
XXXXXXXXXXXXpass
XXXXXXXXelse:
XXXXXXXXXXXXreturn
XXXXsenderX=XawaitXevent.get_sender()
XXXXfnameX=Xsender.first_name
XXXXokX=Xevent.pattern_match.group(1)
XXXXkX=XawaitXevent.reply("**WaitXforXResult.**")
XXXXstart_timeX=Xdatetime.datetime.now()
XXXXasyncXwithXubot.conversation("@Carol5_bot")XasXbot_conv:
XXXXXXXXawaitXbot_conv.send_message(f"/keyX{ok}")
XXXXXXXXawaitXasyncio.sleep(6)
XXXXXXXXresponseX=XawaitXbot_conv.get_response()
XXXXXXXXawaitXevent.delete()
XXXXXXXXend_timeX=Xdatetime.datetime.now()
XXXXXXXXpingtimeX=Xend_timeX-Xstart_time
XXXXXXXXtimeX=Xstr(round(pingtime.total_seconds(),X2))X+X"s"
XXXXXXXXifX"Invalid"XinXresponse.text:
XXXXXXXXXXXXreplyX=Xf"SKXKeyX:X{ok}\n"
XXXXXXXXXXXXreplyX+=X"Result:XInvalidXAPIXKey\n"
XXXXXXXXXXXXreplyX+=X"RESPONSE:X‚ùåInvalidXKey‚ùå\n"
XXXXXXXXXXXXreplyX+=Xf"Time:X{time}\n"
XXXXXXXXXXXXreplyX+=Xf"CheckedXByX**{fname}**"
XXXXXXXXelifX"Test"XinXresponse.text:
XXXXXXXXXXXXreplyX=Xf"SKXKeyX:Xsk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"
XXXXXXXXXXXXreplyX+=X"Result:XTestXmodeXKey\n"
XXXXXXXXXXXXreplyX+=X"RESPONSE:X‚ùåTestXModeXKey‚ùå\n"
XXXXXXXXXXXXreplyX+=Xf"Time:X{time}\n"
XXXXXXXXXXXXreplyX+=Xf"CheckedXByX**{fname}**"
XXXXXXXXelifX"Valid"XinXresponse.text:
XXXXXXXXXXXXreplyX=Xf"SKXKeyX:Xsk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"
XXXXXXXXXXXXreplyX+=X"Result:XLIVE\n"
XXXXXXXXXXXXreplyX+=X"RESPONSE:X‚úÖValidXKey\n"
XXXXXXXXXXXXreplyX+=Xf"Time:X{time}\n"
XXXXXXXXXXXXreplyX+=Xf"CheckedXByX**{fname}**"
XXXXXXXXelse:
XXXXXXXXXXXXreplyX=X"Error,XReportX@LunaBotSupport"
XXXXXXXXawaitXk.edit(reply)


@register(pattern="^/ssX(.*)")
asyncXdefXalive(event):
XXXXifXevent.is_group:
XXXXXXXXifXawaitXis_register_admin(event.input_chat,Xevent.message.sender_id):
XXXXXXXXXXXXpass
XXXXXXXXelse:
XXXXXXXXXXXXreturn
XXXXsenderX=XawaitXevent.get_sender()
XXXXfnameX=Xsender.first_name
XXXXokX=Xevent.pattern_match.group(1)
XXXXkX=XawaitXevent.reply("**WaitXforXResult.**")
XXXXasyncXwithXubot.conversation("@Carol5_bot")XasXbot_conv:
XXXXXXXXawaitXbot_conv.send_message(f"/ssX{ok}")
XXXXXXXXawaitXasyncio.sleep(9)
XXXXXXXXresponseX=XawaitXbot_conv.get_response()
XXXXXXXXifX"TryXagainXafter"XinXresponse.text:
XXXXXXXXXXXXawaitXk.edit(response)
XXXXXXXXXXXXreturn
XXXXXXXXifX"YourXdateXisXinvalid"XinXresponse.text:
XXXXXXXXXXXXawaitXk.edit("FormatXWrongXorXinvalidXcc.")
XXXXXXXXXXXXreturn
XXXXXXXXresX=Xresponse.text
XXXXXXXXtextX=Xf"{res.splitlines()[0]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[1]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[2]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[3]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[4]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[5]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[6]}\n"
XXXXXXXXtextX+=Xf"CheckedXByX**{fname}**"
XXXXXXXXawaitXk.edit(text)


@register(pattern="^/ppX(.*)")
asyncXdefXalive(event):
XXXXifXevent.is_group:
XXXXXXXXifXawaitXis_register_admin(event.input_chat,Xevent.message.sender_id):
XXXXXXXXXXXXpass
XXXXXXXXelse:
XXXXXXXXXXXXreturn
XXXXsenderX=XawaitXevent.get_sender()
XXXXfnameX=Xsender.first_name
XXXXokX=Xevent.pattern_match.group(1)
XXXXkX=XawaitXevent.reply("**WaitXforXResult.**")
XXXXasyncXwithXubot.conversation("@Carol5_bot")XasXbot_conv:
XXXXXXXXawaitXbot_conv.send_message(f"/ppX{ok}")
XXXXXXXXawaitXasyncio.sleep(14)
XXXXXXXXresponseX=XawaitXbot_conv.get_response()
XXXXXXXXifX"TryXagainXafter"XinXresponse.text:
XXXXXXXXXXXXawaitXk.edit(response)
XXXXXXXXXXXXreturn
XXXXXXXXifX"YourXdateXisXinvalid"XinXresponse.text:
XXXXXXXXXXXXawaitXk.edit("FormatXWrongXorXinvalidXcc.")
XXXXXXXXXXXXreturn
XXXXXXXXresX=Xresponse.text
XXXXXXXXtextX=Xf"{res.splitlines()[0]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[1]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[2]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[3]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[4]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[5]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[6]}\n"
XXXXXXXXtextX+=Xf"CheckedXByX**{fname}**"
XXXXXXXXawaitXk.edit(text)


@register(pattern="^/chX(.*)")
asyncXdefXalive(event):
XXXXifXevent.is_group:
XXXXXXXXifXawaitXis_register_admin(event.input_chat,Xevent.message.sender_id):
XXXXXXXXXXXXpass
XXXXXXXXelse:
XXXXXXXXXXXXreturn
XXXXsenderX=XawaitXevent.get_sender()
XXXXfnameX=Xsender.first_name
XXXXokX=Xevent.pattern_match.group(1)
XXXXasyncXwithXubot.conversation("@Carol5_bot")XasXbot_conv:
XXXXXXXXawaitXbot_conv.send_message(f"/chX{ok}")
XXXXXXXXkX=XawaitXevent.reply("**WaitXforXResult.**")
XXXXXXXXawaitXasyncio.sleep(18)
XXXXXXXXresponseX=XawaitXbot_conv.get_response()
XXXXXXXXifX"TryXagainXafter"XinXresponse.text:
XXXXXXXXXXXXawaitXk.edit(response)
XXXXXXXXXXXXreturn
XXXXXXXXifX"YourXdateXisXinvalid"XinXresponse.text:
XXXXXXXXXXXXawaitXk.edit("FormatXWrongXorXinvalidXcc.")
XXXXXXXXXXXXreturn
XXXXXXXXresX=Xresponse.text
XXXXXXXXtextX=Xf"{res.splitlines()[0]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[1]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[2]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[3]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[4]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[5]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[6]}\n"
XXXXXXXXtextX+=Xf"CheckedXByX**{fname}**"
XXXXXXXXawaitXk.edit(text)


@register(pattern="^/auX(.*)")
asyncXdefXalive(event):
XXXXifXevent.is_group:
XXXXXXXXifXawaitXis_register_admin(event.input_chat,Xevent.message.sender_id):
XXXXXXXXXXXXpass
XXXXXXXXelse:
XXXXXXXXXXXXreturn
XXXXsenderX=XawaitXevent.get_sender()
XXXXfnameX=Xsender.first_name
XXXXokX=Xevent.pattern_match.group(1)
XXXXasyncXwithXubot.conversation("@Carol5_bot")XasXbot_conv:
XXXXXXXXawaitXbot_conv.send_message(f"/auX{ok}")
XXXXXXXXkX=XawaitXevent.reply("**WaitXforXResult.**")
XXXXXXXXawaitXasyncio.sleep(18)
XXXXXXXXresponseX=XawaitXbot_conv.get_response()
XXXXXXXXifX"TryXagainXafter"XinXresponse.text:
XXXXXXXXXXXXawaitXevent.reply(response)
XXXXXXXXXXXXreturn
XXXXXXXXifX"YourXdateXisXinvalid"XinXresponse.text:
XXXXXXXXXXXXawaitXevent.reply("FormatXWrongXorXinvalidXcc.")
XXXXXXXXXXXXreturn
XXXXXXXXresX=Xresponse.text
XXXXXXXXtextX=Xf"{res.splitlines()[0]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[1]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[2]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[3]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[4]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[5]}\n"
XXXXXXXXtextX+=Xf"{res.splitlines()[6]}\n"
XXXXXXXXtextX+=Xf"CheckedXByX**{fname}**"
XXXXXXXXawaitXk.edit(text)


@register(pattern="^/binX(.*)")
asyncXdefXalive(event):
XXXXifXevent.is_group:
XXXXXXXXifXawaitXis_register_admin(event.input_chat,Xevent.message.sender_id):
XXXXXXXXXXXXpass
XXXXXXXXelse:
XXXXXXXXXXXXreturn
XXXXsenderX=XawaitXevent.get_sender()
XXXXfnameX=Xsender.first_name
XXXXkX=XawaitXevent.reply("**WaitXforXResult.**")
XXXXokX=Xevent.pattern_match.group(1)
XXXXasyncXwithXubot.conversation("@Carol5_bot")XasXbot_conv:
XXXXXXXXawaitXbot_conv.send_message(f"/binX{ok}")
XXXXXXXXawaitXasyncio.sleep(5)
XXXXXXXXresponseX=XawaitXbot_conv.get_response()
XXXXXXXXresX=Xresponse.text
XXXXXXXXifX"‚ùå"XinXres:
XXXXXXXXXXXXtextX=X"ü§¨‚ùåXINVALIDXBINX‚ùåü§¨\n"
XXXXXXXXXXXXtextX+=Xf"CheckedXByX**{fname}**"
XXXXXXXXXXXXawaitXk.edit(text)
XXXXXXXXelse:
XXXXXXXXXXXXtextX=Xf"{res.splitlines()[0]}\n"
XXXXXXXXXXXXtextX+=Xf"{res.splitlines()[1]}\n"
XXXXXXXXXXXXtextX+=Xf"{res.splitlines()[2]}\n"
XXXXXXXXXXXXtextX+=Xf"{res.splitlines()[3]}\n"
XXXXXXXXXXXXtextX+=Xf"{res.splitlines()[4]}\n"
XXXXXXXXXXXXtextX+=Xf"{res.splitlines()[5]}\n"
XXXXXXXXXXXXtextX+=Xf"{res.splitlines()[6]}\n"
XXXXXXXXXXXXtextX+=Xf"CheckedXByX**{fname}**"
XXXXXXXXXXXXawaitXk.edit(text)
