#Copyright(C)2021errorshivansh


#ThisfileispartofIneruki(TelegramBot)

#Thisprogramisfreesoftware:youcanredistributeitand/ormodify
#itunderthetermsoftheGNUAfferoGeneralPublicLicenseas
#publishedbytheFreeSoftwareFoundation,eitherversion3ofthe
#License,or(atyouroption)anylaterversion.

#Thisprogramisdistributedinthehopethatitwillbeuseful,
#butWITHOUTANYWARRANTY;withouteventheimpliedwarrantyof
#MERCHANTABILITYorFITNESSFORAPARTICULARPURPOSE.Seethe
#GNUAfferoGeneralPublicLicenseformoredetails.

#YoushouldhavereceivedacopyoftheGNUAfferoGeneralPublicLicense
#alongwiththisprogram.Ifnot,see<http://www.gnu.org/licenses/>.

importasyncio
importdatetime

fromtelethon.tlimportfunctions,types

fromIneruki.services.eventsimportregister
fromIneruki.services.telethonimporttbot
fromIneruki.services.telethonuserbotimportubot


asyncdefis_register_admin(chat,user):
ifisinstance(chat,(types.InputPeerChannel,types.InputChannel)):
returnisinstance(
(
awaittbot(functions.channels.GetParticipantRequest(chat,user))
).participant,
(types.ChannelParticipantAdmin,types.ChannelParticipantCreator),
)
ifisinstance(chat,types.InputPeerUser):
returnTrue


@register(pattern="^/gen(.*)")
asyncdefalive(event):
ifevent.is_group:
ifawaitis_register_admin(event.input_chat,event.message.sender_id):
pass
else:
return
sender=awaitevent.get_sender()
fname=sender.first_name
m=awaitevent.reply("GeneratingCC...PlsWeit.")
ok=event.pattern_match.group(1)
asyncwithubot.conversation("@ccgen_robot")asbot_conv:
awaitbot_conv.send_message("/generate")
awaitbot_conv.send_message("💳CreditCardGenerator💳")
awaitasyncio.sleep(2)
awaitbot_conv.send_message(ok)
awaitasyncio.sleep(1)
response=awaitbot_conv.get_response()
awaitasyncio.sleep(1)
awaitresponse.click(text="✅Generate✅")
awaitasyncio.sleep(2)
text="****GeneratedCards:****\n"
gen=awaitbot_conv.get_response()
card=gen.text
text=f"{card.splitlines()[0]}\n"
text+=f"{card.splitlines()[1]}\n"
text+=f"{card.splitlines()[2]}\n"
text+=f"{card.splitlines()[3]}\n"
text+=f"{card.splitlines()[4]}\n"
text+=f"{card.splitlines()[5]}\n"
text+=f"\nGeneratedBy:**{fname}**"
awaitm.edit(text)


@register(pattern="^/key(.*)")
asyncdefalive(event):
ifevent.is_group:
ifawaitis_register_admin(event.input_chat,event.message.sender_id):
pass
else:
return
sender=awaitevent.get_sender()
fname=sender.first_name
ok=event.pattern_match.group(1)
k=awaitevent.reply("**WaitforResult.**")
start_time=datetime.datetime.now()
asyncwithubot.conversation("@Carol5_bot")asbot_conv:
awaitbot_conv.send_message(f"/key{ok}")
awaitasyncio.sleep(6)
response=awaitbot_conv.get_response()
awaitevent.delete()
end_time=datetime.datetime.now()
pingtime=end_time-start_time
time=str(round(pingtime.total_seconds(),2))+"s"
if"Invalid"inresponse.text:
reply=f"SKKey:{ok}\n"
reply+="Result:InvalidAPIKey\n"
reply+="RESPONSE:❌InvalidKey❌\n"
reply+=f"Time:{time}\n"
reply+=f"CheckedBy**{fname}**"
elif"Test"inresponse.text:
reply=f"SKKey:sk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"
reply+="Result:TestmodeKey\n"
reply+="RESPONSE:❌TestModeKey❌\n"
reply+=f"Time:{time}\n"
reply+=f"CheckedBy**{fname}**"
elif"Valid"inresponse.text:
reply=f"SKKey:sk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"
reply+="Result:LIVE\n"
reply+="RESPONSE:✅ValidKey\n"
reply+=f"Time:{time}\n"
reply+=f"CheckedBy**{fname}**"
else:
reply="Error,Report@LunaBotSupport"
awaitk.edit(reply)


@register(pattern="^/ss(.*)")
asyncdefalive(event):
ifevent.is_group:
ifawaitis_register_admin(event.input_chat,event.message.sender_id):
pass
else:
return
sender=awaitevent.get_sender()
fname=sender.first_name
ok=event.pattern_match.group(1)
k=awaitevent.reply("**WaitforResult.**")
asyncwithubot.conversation("@Carol5_bot")asbot_conv:
awaitbot_conv.send_message(f"/ss{ok}")
awaitasyncio.sleep(9)
response=awaitbot_conv.get_response()
if"Tryagainafter"inresponse.text:
awaitk.edit(response)
return
if"Yourdateisinvalid"inresponse.text:
awaitk.edit("FormatWrongorinvalidcc.")
return
res=response.text
text=f"{res.splitlines()[0]}\n"
text+=f"{res.splitlines()[1]}\n"
text+=f"{res.splitlines()[2]}\n"
text+=f"{res.splitlines()[3]}\n"
text+=f"{res.splitlines()[4]}\n"
text+=f"{res.splitlines()[5]}\n"
text+=f"{res.splitlines()[6]}\n"
text+=f"CheckedBy**{fname}**"
awaitk.edit(text)


@register(pattern="^/pp(.*)")
asyncdefalive(event):
ifevent.is_group:
ifawaitis_register_admin(event.input_chat,event.message.sender_id):
pass
else:
return
sender=awaitevent.get_sender()
fname=sender.first_name
ok=event.pattern_match.group(1)
k=awaitevent.reply("**WaitforResult.**")
asyncwithubot.conversation("@Carol5_bot")asbot_conv:
awaitbot_conv.send_message(f"/pp{ok}")
awaitasyncio.sleep(14)
response=awaitbot_conv.get_response()
if"Tryagainafter"inresponse.text:
awaitk.edit(response)
return
if"Yourdateisinvalid"inresponse.text:
awaitk.edit("FormatWrongorinvalidcc.")
return
res=response.text
text=f"{res.splitlines()[0]}\n"
text+=f"{res.splitlines()[1]}\n"
text+=f"{res.splitlines()[2]}\n"
text+=f"{res.splitlines()[3]}\n"
text+=f"{res.splitlines()[4]}\n"
text+=f"{res.splitlines()[5]}\n"
text+=f"{res.splitlines()[6]}\n"
text+=f"CheckedBy**{fname}**"
awaitk.edit(text)


@register(pattern="^/ch(.*)")
asyncdefalive(event):
ifevent.is_group:
ifawaitis_register_admin(event.input_chat,event.message.sender_id):
pass
else:
return
sender=awaitevent.get_sender()
fname=sender.first_name
ok=event.pattern_match.group(1)
asyncwithubot.conversation("@Carol5_bot")asbot_conv:
awaitbot_conv.send_message(f"/ch{ok}")
k=awaitevent.reply("**WaitforResult.**")
awaitasyncio.sleep(18)
response=awaitbot_conv.get_response()
if"Tryagainafter"inresponse.text:
awaitk.edit(response)
return
if"Yourdateisinvalid"inresponse.text:
awaitk.edit("FormatWrongorinvalidcc.")
return
res=response.text
text=f"{res.splitlines()[0]}\n"
text+=f"{res.splitlines()[1]}\n"
text+=f"{res.splitlines()[2]}\n"
text+=f"{res.splitlines()[3]}\n"
text+=f"{res.splitlines()[4]}\n"
text+=f"{res.splitlines()[5]}\n"
text+=f"{res.splitlines()[6]}\n"
text+=f"CheckedBy**{fname}**"
awaitk.edit(text)


@register(pattern="^/au(.*)")
asyncdefalive(event):
ifevent.is_group:
ifawaitis_register_admin(event.input_chat,event.message.sender_id):
pass
else:
return
sender=awaitevent.get_sender()
fname=sender.first_name
ok=event.pattern_match.group(1)
asyncwithubot.conversation("@Carol5_bot")asbot_conv:
awaitbot_conv.send_message(f"/au{ok}")
k=awaitevent.reply("**WaitforResult.**")
awaitasyncio.sleep(18)
response=awaitbot_conv.get_response()
if"Tryagainafter"inresponse.text:
awaitevent.reply(response)
return
if"Yourdateisinvalid"inresponse.text:
awaitevent.reply("FormatWrongorinvalidcc.")
return
res=response.text
text=f"{res.splitlines()[0]}\n"
text+=f"{res.splitlines()[1]}\n"
text+=f"{res.splitlines()[2]}\n"
text+=f"{res.splitlines()[3]}\n"
text+=f"{res.splitlines()[4]}\n"
text+=f"{res.splitlines()[5]}\n"
text+=f"{res.splitlines()[6]}\n"
text+=f"CheckedBy**{fname}**"
awaitk.edit(text)


@register(pattern="^/bin(.*)")
asyncdefalive(event):
ifevent.is_group:
ifawaitis_register_admin(event.input_chat,event.message.sender_id):
pass
else:
return
sender=awaitevent.get_sender()
fname=sender.first_name
k=awaitevent.reply("**WaitforResult.**")
ok=event.pattern_match.group(1)
asyncwithubot.conversation("@Carol5_bot")asbot_conv:
awaitbot_conv.send_message(f"/bin{ok}")
awaitasyncio.sleep(5)
response=awaitbot_conv.get_response()
res=response.text
if"❌"inres:
text="🤬❌INVALIDBIN❌🤬\n"
text+=f"CheckedBy**{fname}**"
awaitk.edit(text)
else:
text=f"{res.splitlines()[0]}\n"
text+=f"{res.splitlines()[1]}\n"
text+=f"{res.splitlines()[2]}\n"
text+=f"{res.splitlines()[3]}\n"
text+=f"{res.splitlines()[4]}\n"
text+=f"{res.splitlines()[5]}\n"
text+=f"{res.splitlines()[6]}\n"
text+=f"CheckedBy**{fname}**"
awaitk.edit(text)
